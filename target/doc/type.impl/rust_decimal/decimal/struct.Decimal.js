(function() {
    var type_impls = Object.fromEntries([["smt_core",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-Add%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-Decimal\" class=\"impl\"><a href=\"#impl-Add-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-AddAssign%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;'a Decimal)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-Decimal\" class=\"impl\"><a href=\"#impl-AddAssign-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: Decimal)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedAdd-for-Decimal\" class=\"impl\"><a href=\"#impl-CheckedAdd-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedAdd.html\" title=\"trait num_traits::ops::checked::CheckedAdd\">CheckedAdd</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method trait-impl\"><a href=\"#method.checked_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedAdd.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(&amp;self, v: &amp;Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Adds two numbers, checking for overflow. If overflow happens, <code>None</code> is\nreturned.</div></details></div></details>","CheckedAdd","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedDiv-for-Decimal\" class=\"impl\"><a href=\"#impl-CheckedDiv-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedDiv.html\" title=\"trait num_traits::ops::checked::CheckedDiv\">CheckedDiv</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method trait-impl\"><a href=\"#method.checked_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedDiv.html#tymethod.checked_div\" class=\"fn\">checked_div</a>(&amp;self, v: &amp;Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, <code>None</code> is returned.</div></details></div></details>","CheckedDiv","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedMul-for-Decimal\" class=\"impl\"><a href=\"#impl-CheckedMul-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedMul.html\" title=\"trait num_traits::ops::checked::CheckedMul\">CheckedMul</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method trait-impl\"><a href=\"#method.checked_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedMul.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(&amp;self, v: &amp;Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, <code>None</code> is returned.</div></details></div></details>","CheckedMul","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedRem-for-Decimal\" class=\"impl\"><a href=\"#impl-CheckedRem-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedRem.html\" title=\"trait num_traits::ops::checked::CheckedRem\">CheckedRem</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem\" class=\"method trait-impl\"><a href=\"#method.checked_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedRem.html#tymethod.checked_rem\" class=\"fn\">checked_rem</a>(&amp;self, v: &amp;Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Finds the remainder of dividing two numbers, checking for underflow, overflow and division\nby zero. If any of that happens, <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedRem.html#tymethod.checked_rem\">Read more</a></div></details></div></details>","CheckedRem","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedSub-for-Decimal\" class=\"impl\"><a href=\"#impl-CheckedSub-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedSub.html\" title=\"trait num_traits::ops::checked::CheckedSub\">CheckedSub</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method trait-impl\"><a href=\"#method.checked_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedSub.html#tymethod.checked_sub\" class=\"fn\">checked_sub</a>(&amp;self, v: &amp;Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Subtracts two numbers, checking for underflow. If underflow happens,\n<code>None</code> is returned.</div></details></div></details>","CheckedSub","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Decimal\" class=\"impl\"><a href=\"#impl-Clone-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Decimal</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Decimal\" class=\"impl\"><a href=\"#impl-Debug-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decimal\" class=\"impl\"><a href=\"#impl-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">checked_add</a>(self, other: Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition. Computes <code>self + other</code>, returning <code>None</code> if overflow occurred.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">saturating_add</a>(self, other: Decimal) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Saturating addition. Computes <code>self + other</code>, saturating at the relevant upper or lower boundary.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">checked_mul</a>(self, other: Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class=\"docblock\"><p>Checked multiplication. Computes <code>self * other</code>, returning <code>None</code> if overflow occurred.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">saturating_mul</a>(self, other: Decimal) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Saturating multiplication. Computes <code>self * other</code>, saturating at the relevant upper or lower boundary.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">checked_sub</a>(self, other: Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction. Computes <code>self - other</code>, returning <code>None</code> if overflow occurred.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">saturating_sub</a>(self, other: Decimal) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Saturating subtraction. Computes <code>self - other</code>, saturating at the relevant upper or lower boundary.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">checked_div</a>(self, other: Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class=\"docblock\"><p>Checked division. Computes <code>self / other</code>, returning <code>None</code> if overflow occurred.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">checked_rem</a>(self, other: Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class=\"docblock\"><p>Checked remainder. Computes <code>self % other</code>, returning <code>None</code> if overflow occurred.</p>\n</div></details></div></details>",0,"smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decimal\" class=\"impl\"><a href=\"#impl-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">MIN</a>: Decimal = MIN</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this decimal type.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::MIN, <span class=\"macro\">dec!</span>(-<span class=\"number\">79_228_162_514_264_337_593_543_950_335</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">MAX</a>: Decimal = MAX</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this decimal type.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::MAX, <span class=\"macro\">dec!</span>(<span class=\"number\">79_228_162_514_264_337_593_543_950_335</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ZERO\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">ZERO</a>: Decimal = ZERO</h4></section></summary><div class=\"docblock\"><p>A constant representing 0.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::ZERO, <span class=\"macro\">dec!</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ONE\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">ONE</a>: Decimal = ONE</h4></section></summary><div class=\"docblock\"><p>A constant representing 1.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::ONE, <span class=\"macro\">dec!</span>(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NEGATIVE_ONE\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">NEGATIVE_ONE</a>: Decimal = NEGATIVE_ONE</h4></section></summary><div class=\"docblock\"><p>A constant representing -1.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::NEGATIVE_ONE, <span class=\"macro\">dec!</span>(-<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.TWO\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">TWO</a>: Decimal = TWO</h4></section></summary><div class=\"docblock\"><p>A constant representing 2.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::TWO, <span class=\"macro\">dec!</span>(<span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.TEN\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">TEN</a>: Decimal = TEN</h4></section></summary><div class=\"docblock\"><p>A constant representing 10.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::TEN, <span class=\"macro\">dec!</span>(<span class=\"number\">10</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ONE_HUNDRED\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">ONE_HUNDRED</a>: Decimal = ONE_HUNDRED</h4></section></summary><div class=\"docblock\"><p>A constant representing 100.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::ONE_HUNDRED, <span class=\"macro\">dec!</span>(<span class=\"number\">100</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ONE_THOUSAND\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">ONE_THOUSAND</a>: Decimal = ONE_THOUSAND</h4></section></summary><div class=\"docblock\"><p>A constant representing 1000.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::ONE_THOUSAND, <span class=\"macro\">dec!</span>(<span class=\"number\">1000</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_SCALE\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">MAX_SCALE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a> = 28u32</h4></section></summary><div class=\"docblock\"><p>The maximum supported scale value.</p>\n<p>Some operations, such as [<code>Self::rescale</code>] may accept larger scale values, but  these\noperations will result in a final value with a scale no larger than this.</p>\n<p>Note that the maximum scale is <em>not</em> the same as the maximum possible numeric precision in\nbase-10.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i64.html\">i64</a>, scale: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns a <code>Decimal</code> with a 64 bit <code>m</code> representation and corresponding <code>e</code> scale.</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h5>\n<ul>\n<li><code>num</code> - An i64 that represents the <code>m</code> portion of the decimal number</li>\n<li><code>scale</code> - A u32 representing the <code>e</code> portion of the decimal number.</li>\n</ul>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>scale</code> is &gt; [<code>Self::MAX_SCALE</code>].</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pi = Decimal::new(<span class=\"number\">3141</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(pi.to_string(), <span class=\"string\">\"3.141\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">try_new</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i64.html\">i64</a>, scale: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Checked version of [<code>Self::new</code>]. Will return an error instead of panicking at run-time.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>max = Decimal::try_new(i64::MAX, u32::MAX);\n<span class=\"macro\">assert!</span>(max.is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i128_with_scale\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_i128_with_scale</a>(num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i128.html\">i128</a>, scale: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Decimal</code> using a 128 bit signed <code>m</code> representation and corresponding <code>e</code> scale.</p>\n<h5 id=\"arguments-1\"><a class=\"doc-anchor\" href=\"#arguments-1\">§</a>Arguments</h5>\n<ul>\n<li><code>num</code> - An i128 that represents the <code>m</code> portion of the decimal number</li>\n<li><code>scale</code> - A u32 representing the <code>e</code> portion of the decimal number.</li>\n</ul>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function panics if <code>scale</code> is &gt; [<code>Self::MAX_SCALE</code>] or if <code>num</code> exceeds the maximum\nsupported 96 bits.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pi = Decimal::from_i128_with_scale(<span class=\"number\">3141i128</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(pi.to_string(), <span class=\"string\">\"3.141\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_i128_with_scale\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">try_from_i128_with_scale</a>(\n    num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i128.html\">i128</a>,\n    scale: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Checked version of <code>Decimal::from_i128_with_scale</code>. Will return <code>Err</code> instead\nof panicking at run-time.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>max = Decimal::try_from_i128_with_scale(i128::MAX, u32::MAX);\n<span class=\"macro\">assert!</span>(max.is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">from_parts</a>(\n    lo: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>,\n    mid: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>,\n    hi: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>,\n    negative: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>,\n    scale: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>,\n) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns a <code>Decimal</code> using the instances constituent parts.</p>\n<h5 id=\"arguments-2\"><a class=\"doc-anchor\" href=\"#arguments-2\">§</a>Arguments</h5>\n<ul>\n<li><code>lo</code> - The low 32 bits of a 96-bit integer.</li>\n<li><code>mid</code> - The middle 32 bits of a 96-bit integer.</li>\n<li><code>hi</code> - The high 32 bits of a 96-bit integer.</li>\n<li><code>negative</code> - <code>true</code> to indicate a negative number.</li>\n<li><code>scale</code> - A power of 10 ranging from 0 to [<code>Self::MAX_SCALE</code>].</li>\n</ul>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pi = Decimal::from_parts(<span class=\"number\">1102470952</span>, <span class=\"number\">185874565</span>, <span class=\"number\">1703060790</span>, <span class=\"bool-val\">false</span>, <span class=\"number\">28</span>);\n<span class=\"macro\">assert_eq!</span>(pi.to_string(), <span class=\"string\">\"3.1415926535897932384626433832\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_scientific\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_scientific</a>(value: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <code>Result</code> which if successful contains the <code>Decimal</code> constitution of\nthe scientific notation provided by <code>value</code>.</p>\n<h5 id=\"arguments-3\"><a class=\"doc-anchor\" href=\"#arguments-3\">§</a>Arguments</h5>\n<ul>\n<li><code>value</code> - The scientific notation of the <code>Decimal</code>.</li>\n</ul>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Decimal::from_scientific(<span class=\"string\">\"9.7e-7\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(value.to_string(), <span class=\"string\">\"0.00000097\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_str_radix</a>(str: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to a decimal.</p>\n<p>The string is expected to be an optional + sign followed by digits.\nDigits are a subset of these characters, depending on radix, and will return an error if outside\nthe expected range:</p>\n<ul>\n<li>0-9</li>\n<li>a-z</li>\n<li>A-Z</li>\n</ul>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::from_str_radix(<span class=\"string\">\"A\"</span>, <span class=\"number\">16</span>)<span class=\"question-mark\">?</span>.to_string(), <span class=\"string\">\"10\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_exact\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_str_exact</a>(str: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Parses a string slice into a decimal. If the value underflows and cannot be represented with the\ngiven scale then this will return an error.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Decimal::from_str_exact(<span class=\"string\">\"0.001\"</span>)<span class=\"question-mark\">?</span>.to_string(), <span class=\"string\">\"0.001\"</span>);\n<span class=\"macro\">assert_eq!</span>(Decimal::from_str_exact(<span class=\"string\">\"0.00000_00000_00000_00000_00000_001\"</span>)<span class=\"question-mark\">?</span>.to_string(), <span class=\"string\">\"0.0000000000000000000000000001\"</span>);\n<span class=\"macro\">assert_eq!</span>(Decimal::from_str_exact(<span class=\"string\">\"0.00000_00000_00000_00000_00000_0001\"</span>), <span class=\"prelude-val\">Err</span>(Error::Underflow));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scale\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">scale</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the scale of the decimal number, otherwise known as <code>e</code>.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>num = Decimal::new(<span class=\"number\">1234</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(num.scale(), <span class=\"number\">3u32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mantissa\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">mantissa</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i128.html\">i128</a></h4></section></summary><div class=\"docblock\"><p>Returns the mantissa of the decimal number.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>num = <span class=\"macro\">dec!</span>(-<span class=\"number\">1.2345678</span>);\n<span class=\"macro\">assert_eq!</span>(num.mantissa(), -<span class=\"number\">12345678i128</span>);\n<span class=\"macro\">assert_eq!</span>(num.scale(), <span class=\"number\">7</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if this Decimal number is equivalent to zero.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>num = Decimal::ZERO;\n<span class=\"macro\">assert!</span>(num.is_zero());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_integer\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_integer</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if this Decimal number has zero fractional part (is equal to an integer)</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">5</span>).is_integer(), <span class=\"bool-val\">true</span>);\n<span class=\"comment\">// Trailing zeros are also ignored\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">5.0000</span>).is_integer(), <span class=\"bool-val\">true</span>);\n<span class=\"comment\">// If there is a fractional part then it is not an integer\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">5.1</span>).is_integer(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_sign\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_sign</a>(&amp;mut self, positive: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.4.0: please use <code>set_sign_positive</code> instead</span></div></span></summary><div class=\"docblock\"><p>An optimized method for changing the sign of a decimal number.</p>\n<h5 id=\"arguments-4\"><a class=\"doc-anchor\" href=\"#arguments-4\">§</a>Arguments</h5>\n<ul>\n<li><code>positive</code>: true if the resulting decimal should be positive.</li>\n</ul>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>one = Decimal::ONE;\none.set_sign(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(one.to_string(), <span class=\"string\">\"-1\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_sign_positive\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_sign_positive</a>(&amp;mut self, positive: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>An optimized method for changing the sign of a decimal number.</p>\n<h5 id=\"arguments-5\"><a class=\"doc-anchor\" href=\"#arguments-5\">§</a>Arguments</h5>\n<ul>\n<li><code>positive</code>: true if the resulting decimal should be positive.</li>\n</ul>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>one = Decimal::ONE;\none.set_sign_positive(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(one.to_string(), <span class=\"string\">\"-1\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_sign_negative\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_sign_negative</a>(&amp;mut self, negative: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>An optimized method for changing the sign of a decimal number.</p>\n<h5 id=\"arguments-6\"><a class=\"doc-anchor\" href=\"#arguments-6\">§</a>Arguments</h5>\n<ul>\n<li><code>negative</code>: true if the resulting decimal should be negative.</li>\n</ul>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>one = Decimal::ONE;\none.set_sign_negative(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(one.to_string(), <span class=\"string\">\"-1\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_scale\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_scale</a>(&amp;mut self, scale: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>An optimized method for changing the scale of a decimal number.</p>\n<h5 id=\"arguments-7\"><a class=\"doc-anchor\" href=\"#arguments-7\">§</a>Arguments</h5>\n<ul>\n<li><code>scale</code>: the new scale of the number</li>\n</ul>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>one = Decimal::ONE;\none.set_scale(<span class=\"number\">5</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(one.to_string(), <span class=\"string\">\"0.00001\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rescale\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">rescale</a>(&amp;mut self, scale: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\"><p>Modifies the <code>Decimal</code> towards the desired scale, attempting to do so without changing the\nunderlying number itself.</p>\n<p>Setting the scale to something less then the current <code>Decimal</code>s scale will\ncause the newly created <code>Decimal</code> to perform rounding using the <code>MidpointAwayFromZero</code> strategy.</p>\n<p>Scales greater than the maximum precision that can be represented by <code>Decimal</code> will be\nautomatically rounded to either [<code>Self::MAX_SCALE</code>] or the maximum precision that can\nbe represented with the given mantissa.</p>\n<h5 id=\"arguments-8\"><a class=\"doc-anchor\" href=\"#arguments-8\">§</a>Arguments</h5>\n<ul>\n<li><code>scale</code>: The desired scale to use for the new <code>Decimal</code> number.</li>\n</ul>\n<h5 id=\"example-14\"><a class=\"doc-anchor\" href=\"#example-14\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"comment\">// Rescaling to a higher scale preserves the value\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>number = <span class=\"macro\">dec!</span>(<span class=\"number\">1.123</span>);\n<span class=\"macro\">assert_eq!</span>(number.scale(), <span class=\"number\">3</span>);\nnumber.rescale(<span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(number.to_string(), <span class=\"string\">\"1.123000\"</span>);\n<span class=\"macro\">assert_eq!</span>(number.scale(), <span class=\"number\">6</span>);\n\n<span class=\"comment\">// Rescaling to a lower scale forces the number to be rounded\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>number = <span class=\"macro\">dec!</span>(<span class=\"number\">1.45</span>);\n<span class=\"macro\">assert_eq!</span>(number.scale(), <span class=\"number\">2</span>);\nnumber.rescale(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(number.to_string(), <span class=\"string\">\"1.5\"</span>);\n<span class=\"macro\">assert_eq!</span>(number.scale(), <span class=\"number\">1</span>);\n\n<span class=\"comment\">// This function never fails. Consequently, if a scale is provided that is unable to be\n// represented using the given mantissa, then the maximum possible scale is used.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>number = <span class=\"macro\">dec!</span>(<span class=\"number\">11.76470588235294</span>);\n<span class=\"macro\">assert_eq!</span>(number.scale(), <span class=\"number\">14</span>);\nnumber.rescale(<span class=\"number\">28</span>);\n<span class=\"comment\">// A scale of 28 cannot be represented given this mantissa, however it was able to represent\n// a number with a scale of 27\n</span><span class=\"macro\">assert_eq!</span>(number.to_string(), <span class=\"string\">\"11.764705882352940000000000000\"</span>);\n<span class=\"macro\">assert_eq!</span>(number.scale(), <span class=\"number\">27</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">serialize</a>(&amp;self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.array.html\">16</a>]</h4></section></summary><div class=\"docblock\"><p>Returns a serialized version of the decimal number.\nThe resulting byte array will have the following representation:</p>\n<ul>\n<li>Bytes 1-4: flags</li>\n<li>Bytes 5-8: lo portion of <code>m</code></li>\n<li>Bytes 9-12: mid portion of <code>m</code></li>\n<li>Bytes 13-16: high portion of <code>m</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">deserialize</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.array.html\">16</a>]) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Deserializes the given bytes into a decimal number.\nThe deserialized byte representation must be 16 bytes and adhere to the following convention:</p>\n<ul>\n<li>Bytes 1-4: flags</li>\n<li>Bytes 5-8: lo portion of <code>m</code></li>\n<li>Bytes 9-12: mid portion of <code>m</code></li>\n<li>Bytes 13-16: high portion of <code>m</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_negative</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.6.3: please use <code>is_sign_negative</code> instead</span></div></span></summary><div class=\"docblock\"><p>Returns <code>true</code> if the decimal is negative.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_positive</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.6.3: please use <code>is_sign_positive</code> instead</span></div></span></summary><div class=\"docblock\"><p>Returns <code>true</code> if the decimal is positive.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sign_negative\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_sign_negative</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the sign bit of the decimal is negative.</p>\n<h5 id=\"example-15\"><a class=\"doc-anchor\" href=\"#example-15\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">true</span>, Decimal::new(-<span class=\"number\">1</span>, <span class=\"number\">0</span>).is_sign_negative());\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">false</span>, Decimal::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>).is_sign_negative());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sign_positive\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_sign_positive</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the sign bit of the decimal is positive.</p>\n<h5 id=\"example-16\"><a class=\"doc-anchor\" href=\"#example-16\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">false</span>, Decimal::new(-<span class=\"number\">1</span>, <span class=\"number\">0</span>).is_sign_positive());\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">true</span>, Decimal::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>).is_sign_positive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">min_value</a>() -&gt; Decimal</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.12.0: Use the associated constant Decimal::MIN</span></div></span></summary><div class=\"docblock\"><p>Returns the minimum possible number that <code>Decimal</code> can represent.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">max_value</a>() -&gt; Decimal</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.12.0: Use the associated constant Decimal::MAX</span></div></span></summary><div class=\"docblock\"><p>Returns the maximum possible number that <code>Decimal</code> can represent.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trunc\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">trunc</a>(&amp;self) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns a new <code>Decimal</code> integral with no fractional portion.\nThis is a true truncation whereby no rounding is performed.</p>\n<h5 id=\"example-17\"><a class=\"doc-anchor\" href=\"#example-17\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pi = <span class=\"macro\">dec!</span>(<span class=\"number\">3.141</span>);\n<span class=\"macro\">assert_eq!</span>(pi.trunc(), <span class=\"macro\">dec!</span>(<span class=\"number\">3</span>));\n\n<span class=\"comment\">// Negative numbers are similarly truncated without rounding\n</span><span class=\"kw\">let </span>neg = <span class=\"macro\">dec!</span>(-<span class=\"number\">1.98765</span>);\n<span class=\"macro\">assert_eq!</span>(neg.trunc(), Decimal::NEGATIVE_ONE);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trunc_with_scale\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">trunc_with_scale</a>(&amp;self, scale: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns a new <code>Decimal</code> with the fractional portion delimited by <code>scale</code>.\nThis is a true truncation whereby no rounding is performed.</p>\n<h5 id=\"example-18\"><a class=\"doc-anchor\" href=\"#example-18\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pi = <span class=\"macro\">dec!</span>(<span class=\"number\">3.141592</span>);\n<span class=\"macro\">assert_eq!</span>(pi.trunc_with_scale(<span class=\"number\">2</span>), <span class=\"macro\">dec!</span>(<span class=\"number\">3.14</span>));\n\n<span class=\"comment\">// Negative numbers are similarly truncated without rounding\n</span><span class=\"kw\">let </span>neg = <span class=\"macro\">dec!</span>(-<span class=\"number\">1.98765</span>);\n<span class=\"macro\">assert_eq!</span>(neg.trunc_with_scale(<span class=\"number\">1</span>), <span class=\"macro\">dec!</span>(-<span class=\"number\">1.9</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fract\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fract</a>(&amp;self) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns a new <code>Decimal</code> representing the fractional portion of the number.</p>\n<h5 id=\"example-19\"><a class=\"doc-anchor\" href=\"#example-19\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pi = Decimal::new(<span class=\"number\">3141</span>, <span class=\"number\">3</span>);\n<span class=\"kw\">let </span>fract = Decimal::new(<span class=\"number\">141</span>, <span class=\"number\">3</span>);\n<span class=\"comment\">// note that it returns a decimal\n</span><span class=\"macro\">assert_eq!</span>(pi.fract(), fract);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">abs</a>(&amp;self) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"example-20\"><a class=\"doc-anchor\" href=\"#example-20\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>num = Decimal::new(-<span class=\"number\">3141</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(num.abs().to_string(), <span class=\"string\">\"3.141\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">floor</a>(&amp;self) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns the largest integer less than or equal to a number.</p>\n<h5 id=\"example-21\"><a class=\"doc-anchor\" href=\"#example-21\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>num = Decimal::new(<span class=\"number\">3641</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(num.floor().to_string(), <span class=\"string\">\"3\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceil\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">ceil</a>(&amp;self) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns the smallest integer greater than or equal to a number.</p>\n<h5 id=\"example-22\"><a class=\"doc-anchor\" href=\"#example-22\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>num = Decimal::new(<span class=\"number\">3141</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(num.ceil().to_string(), <span class=\"string\">\"4\"</span>);\n<span class=\"kw\">let </span>num = Decimal::new(<span class=\"number\">3</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(num.ceil().to_string(), <span class=\"string\">\"3\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">max</a>(self, other: Decimal) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns the maximum of the two numbers.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Decimal::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>);\n<span class=\"kw\">let </span>y = Decimal::new(<span class=\"number\">2</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y, x.max(y));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">min</a>(self, other: Decimal) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns the minimum of the two numbers.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Decimal::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>);\n<span class=\"kw\">let </span>y = Decimal::new(<span class=\"number\">2</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x, x.min(y));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.normalize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">normalize</a>(&amp;self) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Strips any trailing zero’s from a <code>Decimal</code> and converts -0 to 0.</p>\n<h5 id=\"example-23\"><a class=\"doc-anchor\" href=\"#example-23\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>number = Decimal::from_str(<span class=\"string\">\"3.100\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(number.normalize().to_string(), <span class=\"string\">\"3.1\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.normalize_assign\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">normalize_assign</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>An in place version of <code>normalize</code>. Strips any trailing zero’s from a <code>Decimal</code> and converts -0 to 0.</p>\n<h5 id=\"example-24\"><a class=\"doc-anchor\" href=\"#example-24\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>number = Decimal::from_str(<span class=\"string\">\"3.100\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(number.to_string(), <span class=\"string\">\"3.100\"</span>);\nnumber.normalize_assign();\n<span class=\"macro\">assert_eq!</span>(number.to_string(), <span class=\"string\">\"3.1\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">round</a>(&amp;self) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns a new <code>Decimal</code> number with no fractional portion (i.e. an integer).\nRounding currently follows “Bankers Rounding” rules. e.g. 6.5 -&gt; 6, 7.5 -&gt; 8</p>\n<h5 id=\"example-25\"><a class=\"doc-anchor\" href=\"#example-25\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Demonstrating bankers rounding...\n</span><span class=\"kw\">let </span>number_down = Decimal::new(<span class=\"number\">65</span>, <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>number_up   = Decimal::new(<span class=\"number\">75</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(number_down.round().to_string(), <span class=\"string\">\"6\"</span>);\n<span class=\"macro\">assert_eq!</span>(number_up.round().to_string(), <span class=\"string\">\"8\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round_dp_with_strategy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">round_dp_with_strategy</a>(\n    &amp;self,\n    dp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>,\n    strategy: RoundingStrategy,\n) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns a new <code>Decimal</code> number with the specified number of decimal points for fractional\nportion.\nRounding is performed using the provided [<code>RoundingStrategy</code>]</p>\n<h5 id=\"arguments-9\"><a class=\"doc-anchor\" href=\"#arguments-9\">§</a>Arguments</h5>\n<ul>\n<li><code>dp</code>: the number of decimal points to round to.</li>\n<li><code>strategy</code>: the [<code>RoundingStrategy</code>] to use.</li>\n</ul>\n<h5 id=\"example-26\"><a class=\"doc-anchor\" href=\"#example-26\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>tax = <span class=\"macro\">dec!</span>(<span class=\"number\">3.4395</span>);\n<span class=\"macro\">assert_eq!</span>(tax.round_dp_with_strategy(<span class=\"number\">2</span>, RoundingStrategy::MidpointAwayFromZero).to_string(), <span class=\"string\">\"3.44\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round_dp\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">round_dp</a>(&amp;self, dp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns a new <code>Decimal</code> number with the specified number of decimal points for fractional portion.\nRounding currently follows “Bankers Rounding” rules. e.g. 6.5 -&gt; 6, 7.5 -&gt; 8</p>\n<h5 id=\"arguments-10\"><a class=\"doc-anchor\" href=\"#arguments-10\">§</a>Arguments</h5>\n<ul>\n<li><code>dp</code>: the number of decimal points to round to.</li>\n</ul>\n<h5 id=\"example-27\"><a class=\"doc-anchor\" href=\"#example-27\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pi = <span class=\"macro\">dec!</span>(<span class=\"number\">3.1415926535897932384626433832</span>);\n<span class=\"macro\">assert_eq!</span>(pi.round_dp(<span class=\"number\">2</span>).to_string(), <span class=\"string\">\"3.14\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round_sf\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">round_sf</a>(&amp;self, digits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>Some(Decimal)</code> number rounded to the specified number of significant digits. If\nthe resulting number is unable to be represented by the <code>Decimal</code> number then <code>None</code> will\nbe returned.\nWhen the number of significant figures of the <code>Decimal</code> being rounded is greater than the requested\nnumber of significant digits then rounding will be performed using <code>MidpointNearestEven</code> strategy.</p>\n<h5 id=\"arguments-11\"><a class=\"doc-anchor\" href=\"#arguments-11\">§</a>Arguments</h5>\n<ul>\n<li><code>digits</code>: the number of significant digits to round to.</li>\n</ul>\n<h5 id=\"remarks\"><a class=\"doc-anchor\" href=\"#remarks\">§</a>Remarks</h5>\n<p>A significant figure is determined using the following rules:</p>\n<ol>\n<li>Non-zero digits are always significant.</li>\n<li>Zeros between non-zero digits are always significant.</li>\n<li>Leading zeros are never significant.</li>\n<li>Trailing zeros are only significant if the number contains a decimal point.</li>\n</ol>\n<h5 id=\"example-28\"><a class=\"doc-anchor\" href=\"#example-28\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>value = <span class=\"macro\">dec!</span>(<span class=\"number\">305.459</span>);\n<span class=\"macro\">assert_eq!</span>(value.round_sf(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">0</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">300</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">310</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf(<span class=\"number\">3</span>), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">305</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">305.5</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">305.46</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf(<span class=\"number\">6</span>), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">305.459</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf(<span class=\"number\">7</span>), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">305.4590</span>)));\n<span class=\"macro\">assert_eq!</span>(Decimal::MAX.round_sf(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>value = <span class=\"macro\">dec!</span>(<span class=\"number\">0.012301</span>);\n<span class=\"macro\">assert_eq!</span>(value.round_sf(<span class=\"number\">3</span>), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">0.0123</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round_sf_with_strategy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">round_sf_with_strategy</a>(\n    &amp;self,\n    digits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>,\n    strategy: RoundingStrategy,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>Some(Decimal)</code> number rounded to the specified number of significant digits. If\nthe resulting number is unable to be represented by the <code>Decimal</code> number then <code>None</code> will\nbe returned.\nWhen the number of significant figures of the <code>Decimal</code> being rounded is greater than the requested\nnumber of significant digits then rounding will be performed using the provided [RoundingStrategy].</p>\n<h5 id=\"arguments-12\"><a class=\"doc-anchor\" href=\"#arguments-12\">§</a>Arguments</h5>\n<ul>\n<li><code>digits</code>: the number of significant digits to round to.</li>\n<li><code>strategy</code>: if required, the rounding strategy to use.</li>\n</ul>\n<h5 id=\"remarks-1\"><a class=\"doc-anchor\" href=\"#remarks-1\">§</a>Remarks</h5>\n<p>A significant figure is determined using the following rules:</p>\n<ol>\n<li>Non-zero digits are always significant.</li>\n<li>Zeros between non-zero digits are always significant.</li>\n<li>Leading zeros are never significant.</li>\n<li>Trailing zeros are only significant if the number contains a decimal point.</li>\n</ol>\n<h5 id=\"example-29\"><a class=\"doc-anchor\" href=\"#example-29\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>value = <span class=\"macro\">dec!</span>(<span class=\"number\">305.459</span>);\n<span class=\"macro\">assert_eq!</span>(value.round_sf_with_strategy(<span class=\"number\">0</span>, RoundingStrategy::ToZero), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">0</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf_with_strategy(<span class=\"number\">1</span>, RoundingStrategy::ToZero), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">300</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf_with_strategy(<span class=\"number\">2</span>, RoundingStrategy::ToZero), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">300</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf_with_strategy(<span class=\"number\">3</span>, RoundingStrategy::ToZero), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">305</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf_with_strategy(<span class=\"number\">4</span>, RoundingStrategy::ToZero), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">305.4</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf_with_strategy(<span class=\"number\">5</span>, RoundingStrategy::ToZero), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">305.45</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf_with_strategy(<span class=\"number\">6</span>, RoundingStrategy::ToZero), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">305.459</span>)));\n<span class=\"macro\">assert_eq!</span>(value.round_sf_with_strategy(<span class=\"number\">7</span>, RoundingStrategy::ToZero), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">305.4590</span>)));\n<span class=\"macro\">assert_eq!</span>(Decimal::MAX.round_sf_with_strategy(<span class=\"number\">1</span>, RoundingStrategy::ToZero), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">70000000000000000000000000000</span>)));\n\n<span class=\"kw\">let </span>value = <span class=\"macro\">dec!</span>(<span class=\"number\">0.012301</span>);\n<span class=\"macro\">assert_eq!</span>(value.round_sf_with_strategy(<span class=\"number\">3</span>, RoundingStrategy::AwayFromZero), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">dec!</span>(<span class=\"number\">0.0124</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unpack\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">unpack</a>(&amp;self) -&gt; UnpackedDecimal</h4></section></summary><div class=\"docblock\"><p>Convert <code>Decimal</code> to an internal representation of the underlying struct. This is useful\nfor debugging the internal state of the object.</p>\n<h5 id=\"important-disclaimer\"><a class=\"doc-anchor\" href=\"#important-disclaimer\">§</a>Important Disclaimer</h5>\n<p>This is primarily intended for library maintainers. The internal representation of a\n<code>Decimal</code> is considered “unstable” for public use.</p>\n<h5 id=\"example-30\"><a class=\"doc-anchor\" href=\"#example-30\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>pi = <span class=\"macro\">dec!</span>(<span class=\"number\">3.1415926535897932384626433832</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, pi), <span class=\"string\">\"3.1415926535897932384626433832\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, pi.unpack()), <span class=\"string\">\"UnpackedDecimal { \\\n    negative: false, scale: 28, hi: 1703060790, mid: 185874565, lo: 1102470952 \\\n}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f32_retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_f32_retain</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class=\"docblock\"><p>Parses a 32-bit float into a Decimal number whilst retaining any non-guaranteed precision.</p>\n<p>Typically when a float is parsed in Rust Decimal, any excess bits (after ~7.22 decimal points for\nf32 as per IEEE-754) are removed due to any digits following this are considered an approximation\nat best. This function bypasses this additional step and retains these excess bits.</p>\n<h5 id=\"example-31\"><a class=\"doc-anchor\" href=\"#example-31\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Usually floats are parsed leveraging float guarantees. i.e. 0.1_f32 =&gt; 0.1\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"0.1\"</span>, Decimal::from_f32(<span class=\"number\">0.1_f32</span>).unwrap().to_string());\n\n<span class=\"comment\">// Sometimes, we may want to represent the approximation exactly.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"0.100000001490116119384765625\"</span>, Decimal::from_f32_retain(<span class=\"number\">0.1_f32</span>).unwrap().to_string());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f64_retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_f64_retain</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class=\"docblock\"><p>Parses a 64-bit float into a Decimal number whilst retaining any non-guaranteed precision.</p>\n<p>Typically when a float is parsed in Rust Decimal, any excess bits (after ~15.95 decimal points for\nf64 as per IEEE-754) are removed due to any digits following this are considered an approximation\nat best. This function bypasses this additional step and retains these excess bits.</p>\n<h5 id=\"example-32\"><a class=\"doc-anchor\" href=\"#example-32\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Usually floats are parsed leveraging float guarantees. i.e. 0.1_f64 =&gt; 0.1\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"0.1\"</span>, Decimal::from_f64(<span class=\"number\">0.1_f64</span>).unwrap().to_string());\n\n<span class=\"comment\">// Sometimes, we may want to represent the approximation exactly.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"0.1000000000000000055511151231\"</span>, Decimal::from_f64_retain(<span class=\"number\">0.1_f64</span>).unwrap().to_string());</code></pre></div>\n</div></details></div></details>",0,"smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Decimal\" class=\"impl\"><a href=\"#impl-Default-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Decimal</h4></section></summary><div class=\"docblock\"><p>Returns the default value for a <code>Decimal</code> (equivalent to <code>Decimal::ZERO</code>). <a href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html#tymethod.default\" title=\"trait core::default::Default\">Read more</a></p>\n</div></details></div></details>","Default","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Decimal\" class=\"impl\"><a href=\"#impl-Display-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-Div%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div-for-Decimal\" class=\"impl\"><a href=\"#impl-Div-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-DivAssign%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;'a Decimal)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign-for-Decimal\" class=\"impl\"><a href=\"#impl-DivAssign-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: Decimal)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci128%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Ci128%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i128.html\">i128</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i128.html\">i128</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i128>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Ci16%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i16.html\">i16</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i16.html\">i16</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i16>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Ci32%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i32.html\">i32</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i32.html\">i32</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i32>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci64%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Ci64%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i64.html\">i64</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i64.html\">i64</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i64>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Ci8%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i8.html\">i8</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i8.html\">i8</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i8>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cisize%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Cisize%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.isize.html\">isize</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.isize.html\">isize</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<isize>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu128%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Cu128%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u128.html\">u128</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u128.html\">u128</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u128>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Cu16%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u16.html\">u16</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u16.html\">u16</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u16>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Cu32%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u32>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu64%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Cu64%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u64>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Cu8%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u8>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cusize%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-From%3Cusize%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Conversion to <code>Decimal</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>) -&gt; Decimal</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<usize>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromPrimitive-for-Decimal\" class=\"impl\"><a href=\"#impl-FromPrimitive-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html\" title=\"trait num_traits::cast::FromPrimitive\">FromPrimitive</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i32\" class=\"method trait-impl\"><a href=\"#method.from_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i32\" class=\"fn\">from_i32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Converts an <code>i32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i64\" class=\"method trait-impl\"><a href=\"#method.from_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#tymethod.from_i64\" class=\"fn\">from_i64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Converts an <code>i64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i128\" class=\"method trait-impl\"><a href=\"#method.from_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i128\" class=\"fn\">from_i128</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Converts an <code>i128</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u32\" class=\"method trait-impl\"><a href=\"#method.from_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u32\" class=\"fn\">from_u32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Converts an <code>u32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u64\" class=\"method trait-impl\"><a href=\"#method.from_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#tymethod.from_u64\" class=\"fn\">from_u64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Converts an <code>u64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128\" class=\"method trait-impl\"><a href=\"#method.from_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u128\" class=\"fn\">from_u128</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Converts an <code>u128</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f32\" class=\"method trait-impl\"><a href=\"#method.from_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_f32\" class=\"fn\">from_f32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Converts a <code>f32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f64\" class=\"method trait-impl\"><a href=\"#method.from_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_f64\" class=\"fn\">from_f64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Decimal&gt;</h4></section></summary><div class='docblock'>Converts a <code>f64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_f64\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#391\">Source</a><a href=\"#method.from_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_isize\" class=\"fn\">from_isize</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Converts an <code>isize</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#398\">Source</a><a href=\"#method.from_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i8\" class=\"fn\">from_i8</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Converts an <code>i8</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#405\">Source</a><a href=\"#method.from_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i16\" class=\"fn\">from_i16</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Converts an <code>i16</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#433\">Source</a><a href=\"#method.from_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_usize\" class=\"fn\">from_usize</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Converts a <code>usize</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#440\">Source</a><a href=\"#method.from_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u8\" class=\"fn\">from_u8</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Converts an <code>u8</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#447\">Source</a><a href=\"#method.from_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u16\" class=\"fn\">from_u16</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Converts an <code>u16</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details></div></details>","FromPrimitive","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-Decimal\" class=\"impl\"><a href=\"#impl-FromStr-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = Error</h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(value: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, &lt;Decimal as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.87.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.87.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Decimal\" class=\"impl\"><a href=\"#impl-Hash-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.87.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.87.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.87.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.87.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Inv-for-Decimal\" class=\"impl\"><a href=\"#impl-Inv-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/inv/trait.Inv.html\" title=\"trait num_traits::ops::inv::Inv\">Inv</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/inv/trait.Inv.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inv\" class=\"method trait-impl\"><a href=\"#method.inv\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/inv/trait.Inv.html#tymethod.inv\" class=\"fn\">inv</a>(self) -&gt; Decimal</h4></section></summary><div class='docblock'>Returns the multiplicative inverse of <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/inv/trait.Inv.html#tymethod.inv\">Read more</a></div></details></div></details>","Inv","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-Decimal\" class=\"impl\"><a href=\"#impl-LowerExp-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.LowerExp.html\" title=\"trait core::fmt::LowerExp\">LowerExp</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.LowerExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.LowerExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerExp","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-Mul%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-Decimal\" class=\"impl\"><a href=\"#impl-Mul-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-MulAssign%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;'a Decimal)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-Decimal\" class=\"impl\"><a href=\"#impl-MulAssign-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: Decimal)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-Decimal\" class=\"impl\"><a href=\"#impl-Neg-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Num-for-Decimal\" class=\"impl\"><a href=\"#impl-Num-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html\" title=\"trait num_traits::Num\">Num</a> for Decimal</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.FromStrRadixErr\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.FromStrRadixErr\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html#associatedtype.FromStrRadixErr\" class=\"associatedtype\">FromStrRadixErr</a> = Error</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method trait-impl\"><a href=\"#method.from_str_radix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html#tymethod.from_str_radix\" class=\"fn\">from_str_radix</a>(\n    str: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    radix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, &lt;Decimal as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html\" title=\"trait num_traits::Num\">Num</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html#associatedtype.FromStrRadixErr\" title=\"type num_traits::Num::FromStrRadixErr\">FromStrRadixErr</a>&gt;</h4></section></summary><div class='docblock'>Convert from a string and radix (typically <code>2..=36</code>). <a href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html#tymethod.from_str_radix\">Read more</a></div></details></div></details>","Num","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-One-for-Decimal\" class=\"impl\"><a href=\"#impl-One-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.one\" class=\"method trait-impl\"><a href=\"#method.one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#tymethod.one\" class=\"fn\">one</a>() -&gt; Decimal</h4></section></summary><div class='docblock'>Returns the multiplicative identity element of <code>Self</code>, <code>1</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#tymethod.one\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#118\">Source</a><a href=\"#method.set_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.set_one\" class=\"fn\">set_one</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#128-130\">Source</a><a href=\"#method.is_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.is_one\" class=\"fn\">is_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the multiplicative identity. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.is_one\">Read more</a></div></details></div></details>","One","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Decimal\" class=\"impl\"><a href=\"#impl-Ord-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#1009-1011\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#1048-1050\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#1074-1076\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Decimal\" class=\"impl\"><a href=\"#impl-PartialEq-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Decimal) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Decimal\" class=\"impl\"><a href=\"#impl-PartialOrd-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Decimal) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-Product%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; Decimal<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a Decimal&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Panics if out-of-bounds</p>\n</div></details></div></details>","Product<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product-for-Decimal\" class=\"impl\"><a href=\"#impl-Product-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; Decimal<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = Decimal&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Panics if out-of-bounds</p>\n</div></details></div></details>","Product","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-Rem%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem-for-Decimal\" class=\"impl\"><a href=\"#impl-Rem-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-RemAssign%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;'a Decimal)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign-for-Decimal\" class=\"impl\"><a href=\"#impl-RemAssign-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: Decimal)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Decimal\" class=\"impl\"><a href=\"#impl-Serialize-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Signed-for-Decimal\" class=\"impl\"><a href=\"#impl-Signed-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html\" title=\"trait num_traits::sign::Signed\">Signed</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method trait-impl\"><a href=\"#method.abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.abs\" class=\"fn\">abs</a>(&amp;self) -&gt; Decimal</h4></section></summary><div class='docblock'>Computes the absolute value. <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_sub\" class=\"method trait-impl\"><a href=\"#method.abs_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.abs_sub\" class=\"fn\">abs_sub</a>(&amp;self, other: &amp;Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>The positive difference of two numbers. <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.abs_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method trait-impl\"><a href=\"#method.signum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.signum\" class=\"fn\">signum</a>(&amp;self) -&gt; Decimal</h4></section></summary><div class='docblock'>Returns the sign of the number. <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method trait-impl\"><a href=\"#method.is_positive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if the number is positive and false if the number is zero or negative.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method trait-impl\"><a href=\"#method.is_negative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if the number is negative and false if the number is zero or positive.</div></details></div></details>","Signed","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-Sub%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-Decimal\" class=\"impl\"><a href=\"#impl-Sub-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Decimal</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: Decimal) -&gt; Decimal</h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-SubAssign%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;'a Decimal)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-Decimal\" class=\"impl\"><a href=\"#impl-SubAssign-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: Decimal)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26Decimal%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-Sum%3C%26Decimal%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;&amp;'a Decimal&gt; for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; Decimal<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a Decimal&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum<&'a Decimal>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-Decimal\" class=\"impl\"><a href=\"#impl-Sum-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; Decimal<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = Decimal&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToPrimitive-for-Decimal\" class=\"impl\"><a href=\"#impl-ToPrimitive-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html\" title=\"trait num_traits::cast::ToPrimitive\">ToPrimitive</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i64\" class=\"method trait-impl\"><a href=\"#method.to_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#tymethod.to_i64\" class=\"fn\">to_i64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot be\nrepresented by an <code>i64</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i128\" class=\"method trait-impl\"><a href=\"#method.to_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i128\" class=\"fn\">to_i128</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot be\nrepresented by an <code>i128</code> (<code>i64</code> under the default implementation), then\n<code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u64\" class=\"method trait-impl\"><a href=\"#method.to_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#tymethod.to_u64\" class=\"fn\">to_u64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nrepresented by a <code>u64</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u128\" class=\"method trait-impl\"><a href=\"#method.to_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u128\" class=\"fn\">to_u128</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot be\nrepresented by a <code>u128</code> (<code>u64</code> under the default implementation), then\n<code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_f64\" class=\"method trait-impl\"><a href=\"#method.to_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_f64\" class=\"fn\">to_f64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to positive\nor negative inifinity, otherwise <code>None</code> is returned if the value cannot\nbe represented by an <code>f64</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_f64\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#21\">Source</a><a href=\"#method.to_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_isize\" class=\"fn\">to_isize</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>isize</code>. If the value cannot be\nrepresented by an <code>isize</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#28\">Source</a><a href=\"#method.to_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i8\" class=\"fn\">to_i8</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nrepresented by an <code>i8</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#35\">Source</a><a href=\"#method.to_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i16\" class=\"fn\">to_i16</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot be\nrepresented by an <code>i16</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#42\">Source</a><a href=\"#method.to_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i32\" class=\"fn\">to_i32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot be\nrepresented by an <code>i32</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#64\">Source</a><a href=\"#method.to_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_usize\" class=\"fn\">to_usize</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot be\nrepresented by a <code>usize</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#71\">Source</a><a href=\"#method.to_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u8\" class=\"fn\">to_u8</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be\nrepresented by a <code>u8</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#78\">Source</a><a href=\"#method.to_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u16\" class=\"fn\">to_u16</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nrepresented by a <code>u16</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#85\">Source</a><a href=\"#method.to_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u32\" class=\"fn\">to_u32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nrepresented by a <code>u32</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_f32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#108\">Source</a><a href=\"#method.to_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_f32\" class=\"fn\">to_f32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.f32.html\">f32</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to positive\nor negative inifinity, otherwise <code>None</code> is returned if the value cannot\nbe represented by an <code>f32</code>.</div></details></div></details>","ToPrimitive","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26str%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26str%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Try to convert a <code>&amp;str</code> into a <code>Decimal</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>Can fail if the value is out of range for <code>Decimal</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(t: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, Error&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&str>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cf32%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-TryFrom%3Cf32%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.f32.html\">f32</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Try to convert a <code>f32</code> into a <code>Decimal</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>Can fail if the value is out of range for <code>Decimal</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, Error&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<f32>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cf64%3E-for-Decimal\" class=\"impl\"><a href=\"#impl-TryFrom%3Cf64%3E-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.f64.html\">f64</a>&gt; for Decimal</h3><div class=\"docblock\"><p>Try to convert a <code>f64</code> into a <code>Decimal</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>Can fail if the value is out of range for <code>Decimal</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Decimal, Error&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<f64>","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-Decimal\" class=\"impl\"><a href=\"#impl-UpperExp-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.UpperExp.html\" title=\"trait core::fmt::UpperExp\">UpperExp</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.UpperExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.UpperExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperExp","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-Decimal\" class=\"impl\"><a href=\"#impl-Zero-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> for Decimal</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; Decimal</h4></section></summary><div class='docblock'>Returns the additive identity element of <code>Self</code>, <code>0</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.zero\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method trait-impl\"><a href=\"#method.is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the additive identity.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#23\">Source</a><a href=\"#method.set_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#method.set_zero\" class=\"fn\">set_zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.</div></details></div></details>","Zero","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<section id=\"impl-Copy-for-Decimal\" class=\"impl\"><a href=\"#impl-Copy-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for Decimal</h3></section>","Copy","smt_core::common_types::Price","smt_core::common_types::Quantity"],["<section id=\"impl-Eq-for-Decimal\" class=\"impl\"><a href=\"#impl-Eq-for-Decimal\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for Decimal</h3></section>","Eq","smt_core::common_types::Price","smt_core::common_types::Quantity"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[193785]}